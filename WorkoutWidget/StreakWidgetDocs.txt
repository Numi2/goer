Current Streak Widget – Implementation Notes
===========================================

This file summarises the architecture and integration details for the widget that
shows the user’s **current streak** of completed health-goals.

----------------------------------------------------------------------
Feature Recap
----------------------------------------------------------------------
• Counts *consecutive* days (streak) where the user met their goal.
• Goals are expressed as *metric + threshold* (e.g. ≥ 10 000 steps).
• Widget refreshes automatically at midnight, on HealthKit updates and when the
  app triggers a background refresh.


----------------------------------------------------------------------
Main Components
----------------------------------------------------------------------

1. `Metric` (`StreakMetrics.swift`)
   – Enum for high-level health metrics (currently only `.steps`).
   – Maps to the corresponding `HKQuantityType` and exposes a display name.

2. `StreakCache` (`StreakCache.swift`)
   – Persists daily totals in the shared *App Group* `UserDefaults`.
   – Schema: `[Metric : [yyyy-MM-dd : Double]]`.
   – Public APIs
        • `save(total:for:on:)`
        • `totals(for:back:)`  →  fixed-length array starting *today*.

3. `StreakEngine` (`StreakEngine.swift`)
   – Pure-logic helper that turns an array of totals into a streak count
     (`consecutive >= threshold starting today`).

4. `SelectMetricIntent` (`SelectMetricIntent.swift`)
   – `AppIntent` that powers the widget configuration UI (metric & threshold).

5. `StreakWidget` (`StreakWidget.swift`)
   – `Widget` registered in `WorkoutWidgetBundle`.
   – `AppIntentTimelineProvider` reads cached data, evaluates streak and
     schedules next refresh for **00:05** tomorrow.
   – SwiftUI view uses same design language as existing widgets.

6. `HKCollector` (`HKCollector.swift`)
   – Lightweight HealthKit helper (meant to live in the *main app*).
   – Fetches today’s total, calls `StreakCache.save`, then
     `WidgetCenter.shared.reloadAllTimelines()`.


----------------------------------------------------------------------
Integration Steps
----------------------------------------------------------------------
1. **App Group ID**
   – Update `StreakCache.suiteName` to match the project’s real App Group.

2. **Authorise HealthKit**
   – Ensure the main app calls `HKHealthStore.requestAuthorization` for all
     metrics you want to support.

3. **Background Refresh**
   – Schedule an `HKObserverQuery` and/or Background Processing Task that calls
     `HKCollector.refreshToday(for:)` when HealthKit data changes.

4. **Widget Bundle**
   – `WorkoutWidgetBundle` already registers `StreakWidget`. No extra work.


----------------------------------------------------------------------
Extending the Widget
----------------------------------------------------------------------
• More Metrics
  – Add new cases to `Metric` + `MetricAppEnum`.
  – Expose them in `SelectMetricIntent` default cases.

• Custom UI
  – Update `StreakView` to show different icons or colours per metric.


----------------------------------------------------------------------
Testing Tips
----------------------------------------------------------------------
• Run the main app once to populate the cache (`HKCollector`).
• Use Xcode’s *Environment Overrides* to simulate dates after midnight and
  verify automatic refresh behaviour.


----------------------------------------------------------------------
File List (added/changed)
----------------------------------------------------------------------
✔ `StreakMetrics.swift`
✔ `StreakCache.swift`
✔ `StreakEngine.swift`
✔ `SelectMetricIntent.swift`
✔ `StreakWidget.swift`
✔ `HKCollector.swift`
✔ `WorkoutWidgetBundle.swift` (updated to include the new widget)
